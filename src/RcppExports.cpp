// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// iterator_rcpp
double iterator_rcpp(double Rg, double f_T, double f_VPD, double GPP_c, double LAI_c, double k, double epsilon_max);
RcppExport SEXP _BioSim_iterator_rcpp(SEXP RgSEXP, SEXP f_TSEXP, SEXP f_VPDSEXP, SEXP GPP_cSEXP, SEXP LAI_cSEXP, SEXP kSEXP, SEXP epsilon_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rg(RgSEXP);
    Rcpp::traits::input_parameter< double >::type f_T(f_TSEXP);
    Rcpp::traits::input_parameter< double >::type f_VPD(f_VPDSEXP);
    Rcpp::traits::input_parameter< double >::type GPP_c(GPP_cSEXP);
    Rcpp::traits::input_parameter< double >::type LAI_c(LAI_cSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_max(epsilon_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(iterator_rcpp(Rg, f_T, f_VPD, GPP_c, LAI_c, k, epsilon_max));
    return rcpp_result_gen;
END_RCPP
}
// LAI_model_rcpp
List LAI_model_rcpp(NumericVector Tavg, NumericVector VPD, NumericVector Rg, double TMIN, double TMAX, double VPD_MIN, double VPD_MAX, double epsilon_max, double k, double GPP_c, double LAI_c, double LAI_min, int W, int n_smooth);
RcppExport SEXP _BioSim_LAI_model_rcpp(SEXP TavgSEXP, SEXP VPDSEXP, SEXP RgSEXP, SEXP TMINSEXP, SEXP TMAXSEXP, SEXP VPD_MINSEXP, SEXP VPD_MAXSEXP, SEXP epsilon_maxSEXP, SEXP kSEXP, SEXP GPP_cSEXP, SEXP LAI_cSEXP, SEXP LAI_minSEXP, SEXP WSEXP, SEXP n_smoothSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Tavg(TavgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type VPD(VPDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Rg(RgSEXP);
    Rcpp::traits::input_parameter< double >::type TMIN(TMINSEXP);
    Rcpp::traits::input_parameter< double >::type TMAX(TMAXSEXP);
    Rcpp::traits::input_parameter< double >::type VPD_MIN(VPD_MINSEXP);
    Rcpp::traits::input_parameter< double >::type VPD_MAX(VPD_MAXSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_max(epsilon_maxSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type GPP_c(GPP_cSEXP);
    Rcpp::traits::input_parameter< double >::type LAI_c(LAI_cSEXP);
    Rcpp::traits::input_parameter< double >::type LAI_min(LAI_minSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type n_smooth(n_smoothSEXP);
    rcpp_result_gen = Rcpp::wrap(LAI_model_rcpp(Tavg, VPD, Rg, TMIN, TMAX, VPD_MIN, VPD_MAX, epsilon_max, k, GPP_c, LAI_c, LAI_min, W, n_smooth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BioSim_iterator_rcpp", (DL_FUNC) &_BioSim_iterator_rcpp, 7},
    {"_BioSim_LAI_model_rcpp", (DL_FUNC) &_BioSim_LAI_model_rcpp, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_BioSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
